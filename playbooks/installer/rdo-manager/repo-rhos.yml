---
- include: ../../group_by.yml ansible_ssh_user=root

- name: Setup openstack repos
  hosts: "{{ repo_host }}:&RedHat"
  vars:
    - ansible_ssh_user: root
    - product_override_version: 6
  gather_facts: yes
  tasks:
      - name: clean release rpms
        yum: name={{ item }} state=absent
        with_items:
          - rhos-release

      - name: Install release tool on machine
        command: "yum localinstall -y {{ product.rpmrepo[ansible_distribution] }}/{{ product.name }}-release-latest.noarch.rpm"

      - name: Execute rhos-release for pinned osp-director puddle (osp)
        command: "rhos-release -p {{ product.repo.puddle_pin_version }} {{ product.version }}"
        register: pinned_puddle
        when: product.repo_type in ['puddle'] and product.repo.puddle_pin_version is defined

      - name: Execute rhos-release for pinned osp-director poodle (osp)
        command: "rhos-release  -d -p {{ product.repo.poodle_pin_version }} {{ product.version }}"
        register: pinnged_poodle
        when: product.repo_type in ['poodle'] and product.repo.poodle_pin_version is defined

      - name: Execute rhos-release for osp-director puddle (osp)
        command: "rhos-release {{ product.version }}"
        when: product.repo_type in ['puddle'] and product.repo.puddle_pin_version is not defined

      - name: Execute rhos-release for osp-director poodle (osp)
        command: "rhos-release  -d {{ product.version }}"
        when: product.repo_type in ['poodle'] and product.repo.poodle_pin_version is not defined

      - name: yum clean all
        command: yum clean all

      - name: setup vars
        sudo: yes
        template: src=templates/eggs-repo.j2 dest=/etc/yum.repos.d/eggs-tempest-repo.repo mode=0644

- name: Get build details
  hosts: "{{ repo_host }}:&RedHat"
  vars:
    - ansible_ssh_user: root
  roles:
    - build_mark/build

- name: Linux common prep (Collect performance data, etc.)
  hosts: "{{ repo_host }}"
  vars:
    - ansible_ssh_user: root
  roles:
    - { role: linux-common }

- name: Update packages on the host
  hosts: "{{ repo_host }}"
  vars:
    - ansible_ssh_user: root
    - ansible_ssh_private_key_file: "{{ lookup('env','HOME')}}/.ssh/id_rsa"
  tasks:
    - name: repolist
      command: yum -d 7 repolist

    - name: update all packages
      yum: name=* state=latest
      when: yum_update | bool

    - name: reboot host
      sudo: no
      local_action:
        wait_for_ssh
          reboot_first=true
          host="{{ ansible_ssh_host }}"
          user="root"
          key="{{ ansible_ssh_private_key_file }}"
          timeout=900
          sudo=false
      when: "'{{ repo_host }}' == 'virthost'"
