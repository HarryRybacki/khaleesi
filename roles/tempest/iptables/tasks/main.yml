---
- name: ensure bridge interface is up
  service: name=network state=restarted args={{ item.name }}
  sudo: yes
  with_items: bridge_interfaces

- name: dump network and node info
  debug: var=hostvars
  when: job.verbosity <= verbosity.debug

- name: dump network and node info  of tempest
  debug: var=hostvars[nodes.tempest.name].ansible_interfaces
  when: job.verbosity <= verbosity.debug

- name: ensure tempest node can connect to controller
  command: >
    iptables -I INPUT 1
    -s {{hostvars[nodes.tempest.name]['ansible_' + item].ipv4.address}}/32
    -p tcp -j ACCEPT
  when:
    item not in ('lo')
    and hostvars[nodes.tempest.name]['ansible_' + item].ipv4.address is defined
  with_items: hostvars[nodes.tempest.name].ansible_interfaces

- name: save iptables
  shell: service iptables save
  sudo: yes

# - name: restart iptables
#   service: name=iptables state=restarted
